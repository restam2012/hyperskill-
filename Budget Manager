package budget;

import java.util.Scanner;


interface Command {

}

public class Main {
    public static void main(String[] args) {
        CheckAction checkAction = new CheckAction();
        checkAction.act();


    }
}

package budget;

import java.util.*;

public class Sorting extends Comands{
    ArrayList<String> purchase;
    ArrayList<String> listOfType;
    Scanner scanner = new Scanner(System.in);


    Sorting(ArrayList<String> purchase, ArrayList<String> listOfType){
        this.purchase = purchase;
        this.listOfType = listOfType;
    }
    public void startSorting(){
        boolean stop = false;
        while (!stop) {
            System.out.printf("How do you want to sort?\n" +
                    "1) Sort all purchases\n" +
                    "2) Sort by type\n" +
                    "3) Sort certain type\n" +
                    "4) Back\n");
            switch (scanner.nextInt()) {
                case 1:
                    System.out.println();
                    if (purchase.size() > 0) System.out.println("All:");
                    ArrayList<Integer> num = new ArrayList<>();
                    for (int i = 0; i < listOfType.size(); i++) {
                        num.add(i);
                    }
                    outPurchase(sortAll(purchase, num), num);
                    System.out.println();
                    break;
                case 2:
                    System.out.println();
                    sortByType();
                    break;
                case 3:
                    System.out.println();
                    sortCertainType();
                    break;
                case 4:
                    stop = true;
                    break;
            }
        }
    }

    private void sortByType(){
        System.out.println("Types:");
        Type[] type = Type.values();
        String[] stringType = new String[type.length];
        double[] totalForType = new double[type.length];
        int count = 0;
        ArrayList<Integer> list = new ArrayList<>();
        String num;
        double sumOfType, total = 0;
        //List of type
        for(Type t : type){
            stringType[count] = t.getName() + " - $";
            list.clear();
            sumOfType = 0;
            for (int i = 0; i < listOfType.size(); i++) {
                if(t.name().equals(listOfType.get(i))) list.add(i);
            }

            //Output sum money
            for (Integer numOfSelectType : list) {
                int number = purchase.get(numOfSelectType).lastIndexOf("$");
                num = "";
                for (int i = number + 1; i < purchase.get(numOfSelectType).length(); i++) {
                    num += purchase.get(numOfSelectType).charAt(i);
                }
                sumOfType += Double.valueOf(num);

            }
            totalForType[count] = sumOfType;
            total += sumOfType;
            count++;
        }

        //Buble sort
        for(int i = 0; i < totalForType.length - 1; i++){
            for(int j = 0; j < totalForType.length - 1 - i; j++){
                if(totalForType[j] < totalForType[j + 1]){
                    double bufferDouble = totalForType[j];
                    totalForType[j] = totalForType[j + 1];
                    totalForType[j + 1] = bufferDouble;

                    String bufferString = stringType[j];
                    stringType[j] = stringType[j + 1];
                    stringType[j + 1] = bufferString;
                }
            }
        }

        for(int i = 0; i < totalForType.length; i++){
            System.out.println(stringType[i] + String.format("%.2f", totalForType[i]));
        }

        System.out.println("Total sum: $" + String.format("%.2f", total));
        System.out.println();
    }

    private void sortCertainType(){
        ArrayList<Integer> num = new ArrayList<>();
        System.out.printf("Choose the type of purchase\n" +
                "1) Food\n" +
                "2) Clothes\n" +
                "3) Entertainment\n" +
                "4) Other\n");

        int val = scanner.nextInt();
        System.out.println();
        switch (val){
            case 1:
                num = findNumOfSelectType(listOfType, Type.FOOD);
                if(num.size() > 0) System.out.println("Food:");
                break;
            case 2:
                num = findNumOfSelectType(listOfType, Type.CLOTHES);
                if(num.size() > 0) System.out.println("Clothes:");
                break;
            case 3:
                num = findNumOfSelectType(listOfType, Type.ENTERTAINMENT);
                if(num.size() > 0) System.out.println("Entertainment:");
                break;
            case 4:
                num = findNumOfSelectType(listOfType, Type.OTHER);
                if(num.size() > 0) System.out.println("Other:");
                break;
        }
        outPurchase(sortAll(purchase, num), num);
        System.out.println();
    }

    private ArrayList<String> sortAll(ArrayList<String> purchase ,ArrayList<Integer> arrayNum){
        ArrayList<String> inCorrectOrder = new ArrayList<>();
        String num;
        String[] nameOfPurchase = new String[arrayNum.size()];
        double[] coastOfPurchase = new double[arrayNum.size()];

        for (int i = 0; i < nameOfPurchase.length; i++) {
            int number = purchase.get(i).lastIndexOf("$") + 1;
            nameOfPurchase[i] = purchase.get(i).substring(0, number);
            coastOfPurchase[i] = Double.valueOf(purchase.get(i).substring(number));
        }
        for(int i = 0; i < nameOfPurchase.length - 1; i++){
            for(int j = 0; j < nameOfPurchase.length - 1 - i; j++){
                if(coastOfPurchase[j] < coastOfPurchase[j + 1]){
                    double bufferCoast = coastOfPurchase[j];
                    coastOfPurchase[j] = coastOfPurchase[j + 1];
                    coastOfPurchase[j + 1] = bufferCoast;

                    String bufferPurchase = nameOfPurchase[j];
                    nameOfPurchase[j] = nameOfPurchase[j + 1];
                    nameOfPurchase[j + 1] = bufferPurchase;
                }
            }
        }
        for(int i = 0; i < nameOfPurchase.length; i++){
            inCorrectOrder.add(nameOfPurchase[i] + String.format("%.2f", coastOfPurchase[i]));
        }
        return inCorrectOrder;
    }

}

package budget;

import java.awt.image.AreaAveragingScaleFilter;
import java.beans.IntrospectionException;
import java.io.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Scanner;

public class Comands {
    Scanner scanner = new Scanner(System.in);
    DecimalFormat df = new DecimalFormat("#.##");
    public double addIncome(double cash){
        System.out.println("Enter income:");
        cash += scanner.nextDouble();
        return cash;
    }

    public Varible addPurchase(ArrayList purchase, double cash, ArrayList type){
        int select = -1;
        while (select != 5) {
            System.out.printf("Choose the type of purchase\n" +
                    "1) Food\n" +
                    "2) Clothes\n" +
                    "3) Entertainment\n" +
                    "4) Other\n" +
                    "5) Back\n");
            select = scanner.nextInt();
            switch (select) {
                case 1:
                    type.add(Type.FOOD.name());
                    break;
                case 2:
                    type.add(Type.CLOTHES.name());
                    break;
                case 3:
                    type.add(Type.ENTERTAINMENT.name());
                    break;
                case 4:
                    type.add(Type.OTHER.name());
                    break;
                case 5:
                    return new Varible(cash, purchase, type);

            }

            System.out.println();
            String str = "";
            System.out.println("Enter purchase name:");
            while (str.length() == 0) {
                str = scanner.nextLine().trim();
            }
            System.out.println("Enter its price");
            String st = scanner.nextLine();
            double d = Double.valueOf(st);//scanner.nextDouble();
            cash = cash - d < 0 ? 0 : cash - d;
            str += " $" + String.format("%.2f", d);
            //str += " $" + st;
            purchase.add(str);
            System.out.println("Purchase was added!");
            System.out.println();
        }
        return new Varible(cash, purchase, type);
    }

    public void showPurchase(ArrayList<String> purchase, ArrayList<String> type) {
        if (purchase.size() == 0) {
            System.out.println("Purchase list is empty!");
        } else {
            int select = -1;
            while (select != 6) {
                ArrayList<Integer> num = new ArrayList<>();
                System.out.printf("Choose the type of purchases\n" +
                        "1) Food\n" +
                        "2) Clothes\n" +
                        "3) Entertainment\n" +
                        "4) Other\n" +
                        "5) All\n" +
                        "6) Back\n");
                select = scanner.nextInt();
                System.out.println();
                switch (select) {
                    case 1:
                        num = findNumOfSelectType(type, Type.FOOD);
                        System.out.println("Food:");
                        break;
                    case 2:
                        num = findNumOfSelectType(type, Type.CLOTHES);
                        System.out.println("Clothes:");
                        break;
                    case 3:
                        System.out.println("Entertainment:");
                        num = findNumOfSelectType(type, Type.ENTERTAINMENT);
                        break;
                    case 4:
                        num = findNumOfSelectType(type, Type.OTHER);
                        System.out.println("Other:");
                        break;
                    case 5:
                        for (int i = 0; i < type.size(); i++) {
                            num.add(i);
                        }
                        System.out.println("All:");
                        break;
                    case 6:
                        return;
                }
                outPurchase(purchase, num);
                System.out.println();
            }
        }
    }

    protected ArrayList<Integer> findNumOfSelectType(ArrayList<String> type, Type select){
        ArrayList<Integer> num = new ArrayList<>();
        Object [] mass = type.toArray();
        for (int i = 0; i < mass.length; i++){
            if(mass[i].equals(select.name())) num.add(i);
        }
        return num;
    }
    protected void outPurchase(ArrayList<String> purchase, ArrayList<Integer> arrayNum){
        String num;
        double total = 0;
        if (arrayNum.size() == 0) System.out.println("Purchase list is empty!");
        else {
            for (Integer list : arrayNum) {
                System.out.println(purchase.get(list));
                int number = purchase.get(list).lastIndexOf("$");
                num = "";
                for (int i = number + 1; i < purchase.get(list).length(); i++) {
                    num += purchase.get(list).charAt(i);
                }
                total += Double.valueOf(num);
            }
            System.out.println("Total: $" + String.format("%.2f", total));
        }
    }

    public void showBalance(double cash) {
        System.out.println("Balance: $" + String.format("%.2f", cash));
    }

    public void savePurchase(Varible varible) {
        try (PrintWriter fileWriter = new PrintWriter("D:/purchases.txt")){
            fileWriter.println(varible.cash);
            for(int i = 0; i < varible.purchase.size(); i++){
                fileWriter.println(varible.purchase.get(i));
                fileWriter.println(varible.type.get(i));
            }
        } catch (IOException e){}
        System.out.println("Purchase were saved!");
    }

    public Varible importPurchase(Varible varible) {
        try (Reader file = new FileReader("D:/purchases.txt")){
            Scanner scanner = new Scanner(file);
            varible.cash = Double.valueOf(scanner.nextLine());
            while (scanner.hasNextLine()){
                varible.purchase.add(scanner.nextLine());
                varible.type.add(scanner.nextLine());
            }
        } catch (Exception e ){System.out.println(e);}
        System.out.println("Purchases were loaded!");
        return varible;
    }

    public void sorting(ArrayList<String> purchase, ArrayList<String> type){
        Sorting sorting = new Sorting(purchase, type);
        sorting.startSorting();
    }
}

package budget;
import java.util.ArrayList;
import java.util.Scanner;

enum Type{ FOOD(1, "Food"), CLOTHES(2, "Clothes"), ENTERTAINMENT(3, "Entertainment"), OTHER(4, "Other");
    int select;
    String name;
    Type(int select, String name){
        this.select = select;
        this.name = name;
    }
    public int getSelect(){
        return select;
    }

    public String getName(){
        return name;
    }
    public static Type findByNum(int num) {
        for (Type value: values()) {
            if (num == value.select) {
                return value;
            }
        }
        return null;
    }
}

public class CheckAction {
    public void act(){
        double cash = 0;
        Scanner scanner = new Scanner(System.in);
        int check = -1;
        Comands command = new Comands();
        ArrayList purchase = new ArrayList();
        ArrayList type = new ArrayList();
        while (check != 0) {
            System.out.printf("Choose your action:\n" +
                    "1) Add income\n" +
                    "2) Add purchase\n" +
                    "3) Show list of purchases\n" +
                    "4) Balance\n" +
                    "5) Save\n" +
                    "6) Load\n" +
                    "7) Analyze (Sort)\n" +
                    "0) Exit\n");
            check = scanner.nextInt();
            System.out.println();
            switch (check) {
                case 1:
                    cash = command.addIncome(cash);
                    System.out.println("Income was added!");
                    break;
                case 2:
                    Varible v = command.addPurchase(purchase, cash, type);
                    cash = v.getCash();
                    purchase = v.getPurchase();
                    type = v.getType();
                    break;
                case 3:
                    command.showPurchase(purchase, type);
                    break;
                case 4:
                    command.showBalance(cash);
                    break;
                case 5:
                    command.savePurchase(new Varible(cash, purchase, type));
                    break;
                case 6:
                    Varible v1 = command.importPurchase(new Varible(cash, purchase, type));
                    cash = v1.getCash();
                    purchase = v1.getPurchase();
                    type = v1.getType();
                    break;
                case 7:
                    command.sorting(purchase,type);
                    break;
                case 0:
                    System.out.println("Bye!");
                    break;
                default:
                    System.out.println("Invalid number");
                    break;
            }
            System.out.println();
        }
    }
}
