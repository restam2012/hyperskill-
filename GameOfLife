package life;

import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

public class Main {
    static int n, alive;
    static char[][] universe;
    static int generation = 1;
    static int m = 99; //scanner.nextInt();
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = 20;//scanner.nextInt();

        FirstUniverse firstUniverse = new FirstUniverse();
        universe = firstUniverse.firstGeneration(n);
        try {
            GameOfLife swingClass = new GameOfLife(/*n, "Generation #" + generation, "Alive: " + Main.alive, universe*/);
        } catch (Exception e){}
    }
}


package life;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.Locale;

public class GameOfLife extends JFrame {
    private static Image img;
    private static boolean stop = false;
    private static int slider = 800;
    public GameOfLife() throws InterruptedException{
        super("Game of life");
        int n = 20;//scanner.nextInt();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(700, 500);
        JPanel panelForButton = new JPanel();
        panelForButton.setBounds(10, 0, 200, 500);
        panelForButton.setLayout(new BoxLayout(panelForButton, BoxLayout.X_AXIS));

        JPanel panelForLabels = new JPanel();
        panelForLabels.setBounds(0, 0, 200, 500);
        panelForLabels.setLayout(new BoxLayout(panelForLabels, BoxLayout.Y_AXIS));
        panelForLabels.add(panelForButton);
        add(panelForLabels);

        JButton playButton = new JButton(new ImageIcon(new ImageIcon("C:\\Users\\Kirill\\IdeaProjects\\new\\src\\Img\\play.png").getImage().getScaledInstance( 30, 30,  java.awt.Image.SCALE_SMOOTH )));
        playButton.setPreferredSize(new Dimension(30,30));
        panelForButton.add(playButton);
        playButton.addActionListener(e -> {
            GameOfLife.stop = GameOfLife.stop ? false : true;
        });

        JButton updateButton = new JButton(new ImageIcon(new ImageIcon("C:\\Users\\Kirill\\IdeaProjects\\new\\src\\Img\\update.png").getImage().getScaledInstance( 30, 30,  java.awt.Image.SCALE_SMOOTH )));
        updateButton.setPreferredSize(new Dimension(30,30));
        updateButton.addActionListener(e -> {
            FirstUniverse firstUniverse = new FirstUniverse();
            Main.universe = firstUniverse.firstGeneration(n);
            Main.generation = 1;
        });
        panelForButton.add(updateButton);

        JLabel GenerationLabel = new JLabel();
        GenerationLabel.setBounds(10,100, 100,30);
        panelForLabels.add(GenerationLabel);

        JLabel AliveLabel = new JLabel();
        AliveLabel.setBounds(10,130, 100,30);
        AliveLabel.setHorizontalAlignment(SwingConstants.LEFT);
        panelForLabels.add(AliveLabel);

        JLabel speedMode = new JLabel("Speed mode:");
        speedMode.setBounds(0,0, 100,30);
        speedMode.setHorizontalAlignment(SwingConstants.LEFT);
        speedMode.setFont(new Font("Courier", Font.BOLD,10));
        panelForLabels.add(speedMode);

        JSlider sliderSpeed = new JSlider(100, 1000);
        sliderSpeed.addChangeListener(e -> {
            slider = sliderSpeed.getMaximum() - sliderSpeed.getValue() + sliderSpeed.getMinimum();
        });
        panelForLabels.add(sliderSpeed);

        JPanel greenPanel = new JPanel();
        greenPanel.setBounds(220,0,580,500);
        greenPanel.setLayout(new BorderLayout());
        greenPanel.setBackground(Color.GREEN);
        add(greenPanel);


        JLabel helloLabel = new JLabel("Hello");
        helloLabel.setBounds(50,20, 100,30);
        helloLabel.setHorizontalAlignment(SwingConstants.CENTER);
        helloLabel.setVerticalAlignment(SwingConstants.CENTER);

        greenPanel.add(new MyPannel());

        setLayout(null); // sets absolute positioning of components
        setVisible(true);
        while (true) {
            while (Main.m < Main.generation) Thread.sleep(1);
            while (Main.m >= Main.generation) {
                Thread.sleep(slider);
                while (stop) {
                    Thread.sleep(1);
                }
                GenerationLabel.setText("Generation #" + Main.generation++);
                AliveLabel.setText("Alive: " + Main.alive);
                repaint();
            }
        }
    }
}


package life;

import javax.swing.*;
import java.awt.*;

public class MyPannel extends JPanel {

    public void paint(Graphics g) {
        int x = 20, y = 5;
        for (int i = 0; i <= Main.n; i++){
            g.drawLine(x, 5, x, 405);
            g.drawLine(20, y, 420, y);
            x += 20;
            y += 20;
        }
        y = 5;
        for(char[] ch1 : Main.universe){
            x = 20;
            for (char ch : ch1) {
                if (ch == 'O'){
                    g.setColor(Color.black);
                    g.fillRect(x, y, 20, 20);
                }
                x += 20;
            }
            y += 20;
        }
        State state = new State();
        state.generation(1);
    }
}


package life;

import java.util.Random;

public class FirstUniverse {

    public char[][] firstGeneration(int n) {
        Main.alive = 0;
        Random random = new Random();
        char universe[][] = new char[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                boolean b = random.nextBoolean();
                universe[i][j] = b ? 'O' : ' ';
                if (universe[i][j] == 'O') Main.alive++;
            }
        }
        return universe;
    }
}


package life;

import java.lang.reflect.Array;
import java.util.Arrays;

public class State {
    public void generation(int m){
        Main.alive = 0;
        if (m == 0) return;
        char[][] oldUniverse = Main.universe;
        //char[][] newUniverse = new char[Main.universe.length][Main.universe.length];
        int count;
        int h, w, h1, w1;
        for (int k = 0; k < m; k++) {
            for (int i = 0; i < Main.universe.length; i++){
                for (int j = 0; j < Main.universe[0].length; j++) {
                    count = 0;
                    for (int i1 = i - 1; i1 <= i + 1; i1++) {
                        for (int j1 = j - 1; j1 <= j + 1; j1++) {
                            if (i1 != i || j1 != j) {
                               // System.out.println(i + " " + i1 + " " + j + " " + j1);
                                count += check(oldUniverse, i1 < 0 ? Main.universe.length - 1 : i1 == Main.universe.length ? 0 : i1,
                                        j1 < 0 ? Main.universe[i].length - 1 : j1 == Main.universe[i].length ? 0 : j1);
                            }
                        }
                    }
                    if (oldUniverse[i][j] == 'O' && (count == 3 || count == 2)) Main.universe[i][j] = 'O';
                    else if (count == 3) Main.universe[i][j] = 'O';
                    else Main.universe[i][j] = ' ';
                    if (Main.universe[i][j] == 'O') Main.alive++;
                }
            }
            for (int i1 = 0; i1 < oldUniverse.length; i1++) {
                for (int j1 = 0; j1 < oldUniverse[i1].length; j1++) {
                    oldUniverse[i1][j1] = Main.universe[i1][j1];
                }
            }
        }

        //Main.universe = newUniverse;
    }

    private int check(char[][] oldUniverse, int i, int j) {
        if (oldUniverse[i][j] == 'O') return 1;
        else return 0;
    }

}
